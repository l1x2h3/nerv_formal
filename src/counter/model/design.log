
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46+124 (git sha1 d1695ad99, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: counter.sv
Parsing formal SystemVerilog input from `counter.sv' to AST representation.
Storing AST representation for module `$abstract\counter'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: counter_props.sv
Parsing formal SystemVerilog input from `counter_props.sv' to AST representation.
Storing AST representation for module `$abstract\counter_props'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: counter_top.sv
Parsing formal SystemVerilog input from `counter_top.sv' to AST representation.
Storing AST representation for module `$abstract\counter_top'.
Successfully finished Verilog frontend.

4. Executing PREP pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\counter_top'.
Generating RTLIL representation for module `\counter_top'.

4.2.1. Analyzing design hierarchy..
Top module:  \counter_top

4.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\counter_props'.
Generating RTLIL representation for module `\counter_props'.

4.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\counter'.
Generating RTLIL representation for module `\counter'.

4.2.4. Analyzing design hierarchy..
Top module:  \counter_top
Used module:     \counter_props
Used module:     \counter

4.2.5. Analyzing design hierarchy..
Top module:  \counter_top
Used module:     \counter_props
Used module:     \counter
Removing unused module `$abstract\counter_top'.
Removing unused module `$abstract\counter_props'.
Removing unused module `$abstract\counter'.
Removed 3 unused modules.
Module counter_props directly or indirectly contains formal properties -> setting "keep" attribute.
Module counter_top directly or indirectly contains formal properties -> setting "keep" attribute.

4.3. Executing PROC pass (convert processes to netlists).

4.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$counter.sv:8$23 in module counter.
Marked 1 switch rules as full_case in process $proc$counter_props.sv:34$5 in module counter_props.
Removed a total of 0 dead cases.

4.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 5 assignments to connections.

4.3.4. Executing PROC_INIT pass (extract init attributes).

4.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\counter.$proc$counter.sv:8$23'.

4.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

4.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$counter.sv:8$23'.
     1/1: $0\count[3:0]
Creating decoders for process `\counter_props.$proc$counter_props.sv:0$20'.
Creating decoders for process `\counter_props.$proc$counter_props.sv:34$5'.
     1/2: $assert$counter_props.sv:40$17_EN
     2/2: $assert$counter_props.sv:38$14_EN

4.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\count' using process `\counter.$proc$counter.sv:8$23'.
  created $adff cell `$procdff$43' with positive edge clock and positive level reset.
Creating register for signal `\counter_props.$past$counter_props.sv:36$1$0' using process `\counter_props.$proc$counter_props.sv:34$5'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\counter_props.$past$counter_props.sv:36$2$0' using process `\counter_props.$proc$counter_props.sv:34$5'.
  created $dff cell `$procdff$45' with positive edge clock.
Creating register for signal `\counter_props.$past$counter_props.sv:37$3$0' using process `\counter_props.$proc$counter_props.sv:34$5'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\counter_props.$past$counter_props.sv:38$4$0' using process `\counter_props.$proc$counter_props.sv:34$5'.
  created $dff cell `$procdff$47' with positive edge clock.

4.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\counter.$proc$counter.sv:8$23'.
Removing empty process `counter.$proc$counter.sv:8$23'.
Removing empty process `counter_props.$proc$counter_props.sv:0$20'.
Found and cleaned up 3 empty switches in `\counter_props.$proc$counter_props.sv:34$5'.
Removing empty process `counter_props.$proc$counter_props.sv:34$5'.
Cleaned up 4 empty switches.

4.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~1 debug messages>
Optimizing module counter_props.
<suppressed ~2 debug messages>
Optimizing module counter_top.

4.4. Executing FUTURE pass.

4.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
Optimizing module counter_props.
Optimizing module counter_top.

4.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_props..
Finding unused cells or wires in module \counter_top..
Removed 0 unused cells and 17 unused wires.
<suppressed ~2 debug messages>

4.7. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Checking module counter_props...
Checking module counter_top...
Found and reported 0 problems.

4.8. Executing OPT pass (performing simple optimizations).

4.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
Optimizing module counter_props.
Optimizing module counter_top.

4.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_props'.
<suppressed ~3 debug messages>
Finding identical cells in module `\counter_top'.
Removed a total of 1 cells.

4.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_props..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_props.
  Optimizing cells in module \counter_top.
Performed a total of 0 changes.

4.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_props'.
Finding identical cells in module `\counter_top'.
Removed a total of 0 cells.

4.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_props..
Finding unused cells or wires in module \counter_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
Optimizing module counter_props.
Optimizing module counter_top.

4.8.8. Rerunning OPT passes. (Maybe there is more to do..)

4.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_props..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_props.
  Optimizing cells in module \counter_top.
Performed a total of 0 changes.

4.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_props'.
Finding identical cells in module `\counter_top'.
Removed a total of 0 cells.

4.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_props..
Finding unused cells or wires in module \counter_top..

4.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
Optimizing module counter_props.
Optimizing module counter_top.

4.8.14. Finished OPT passes. (There is nothing left to do.)

4.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell counter.$add$counter.sv:12$24 ($add).
Removed top 28 bits (of 32) from port Y of cell counter.$add$counter.sv:12$24 ($add).
Removed top 28 bits (of 32) from wire counter.$add$counter.sv:12$24_Y.
Removed top 31 bits (of 32) from port B of cell counter_props.$add$counter_props.sv:38$15 ($add).
Removed top 27 bits (of 32) from port Y of cell counter_props.$add$counter_props.sv:38$15 ($add).
Removed top 27 bits (of 32) from port B of cell counter_props.$eq$counter_props.sv:38$16 ($eq).
Removed top 27 bits (of 32) from wire counter_props.$add$counter_props.sv:38$15_Y.

4.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_props..
Finding unused cells or wires in module \counter_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.11. Executing MEMORY_COLLECT pass (generating $mem cells).

4.12. Executing OPT pass (performing simple optimizations).

4.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
Optimizing module counter_props.
Optimizing module counter_top.

4.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_props'.
Finding identical cells in module `\counter_top'.
Removed a total of 0 cells.

4.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_props..
Finding unused cells or wires in module \counter_top..

4.12.4. Finished fast OPT passes.

4.13. Printing statistics.

=== counter ===

   Number of wires:                  6
   Number of wire bits:             15
   Number of public wires:           4
   Number of public wire bits:       7
   Number of ports:                  4
   Number of port bits:              7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $add                            1
     $adff                           1
     $mux                            1

=== counter_props ===

   Number of wires:                 21
   Number of wire bits:             34
   Number of public wires:           4
   Number of public wire bits:       7
   Number of ports:                  4
   Number of port bits:              7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $add                            1
     $check                          3
     $dff                            4
     $eq                             1
     $logic_and                      2
     $logic_not                      2
     $mux                            6
     $ne                             1

=== counter_top ===

   Number of wires:                  4
   Number of wire bits:              7
   Number of public wires:           4
   Number of public wire bits:       7
   Number of ports:                  3
   Number of port bits:              3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     counter                         1
     counter_props                   1

=== design hierarchy ===

   counter_top                       1
     counter                         1
     counter_props                   1

   Number of wires:                 31
   Number of wire bits:             56
   Number of public wires:          12
   Number of public wire bits:      21
   Number of ports:                 11
   Number of port bits:             17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     $add                            2
     $adff                           1
     $check                          3
     $dff                            4
     $eq                             1
     $logic_and                      2
     $logic_not                      2
     $mux                            7
     $ne                             1

4.14. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Checking module counter_props...
Checking module counter_top...
Found and reported 0 problems.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \counter_top
Used module:     \counter
Used module:     \counter_props

5.2. Analyzing design hierarchy..
Top module:  \counter_top
Used module:     \counter
Used module:     \counter_props
Removed 0 unused modules.
Module counter_props directly or indirectly contains formal properties -> setting "keep" attribute.
Module counter_top directly or indirectly contains formal properties -> setting "keep" attribute.

6. Executing jny backend.

7. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 8771c32ce9, CPU: user 0.03s system 0.00s, MEM: 13.32 MB peak
Yosys 0.46+124 (git sha1 d1695ad99, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 31% 6x opt_expr (0 sec), 18% 5x opt_clean (0 sec), ...
