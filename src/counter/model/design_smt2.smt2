; SMT-LIBv2 description generated by Yosys 0.46+124 (git sha1 d1695ad99, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
; yosys-smt2-module counter
(declare-sort |counter_s| 0)
(declare-fun |counter_is| (|counter_s|) Bool)
(declare-fun |counter#0| (|counter_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_n reset| ((state |counter_s|)) Bool (|counter#0| state))
(declare-fun |counter#1| (|counter_s|) Bool) ; \enable
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
; yosys-smt2-witness {"offset": 0, "path": ["\\enable"], "smtname": "enable", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_n enable| ((state |counter_s|)) Bool (|counter#1| state))
; yosys-smt2-anyinit counter#2 4 counter.sv:8.5-14.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_43"], "smtname": 2, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |counter#2| (|counter_s|) (_ BitVec 4)) ; \_witness_.anyinit_procdff_43
(define-fun |counter#3| ((state |counter_s|)) (_ BitVec 4) (ite (|counter#0| state) #b0000 (|counter#2| state))) ; \count
; yosys-smt2-output count 4
; yosys-smt2-wire count 4
(define-fun |counter_n count| ((state |counter_s|)) (_ BitVec 4) (|counter#3| state))
(declare-fun |counter#4| (|counter_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_n clk| ((state |counter_s|)) Bool (|counter#4| state))
; yosys-smt2-register _witness_.anyinit_procdff_43 4
; yosys-smt2-wire _witness_.anyinit_procdff_43 4
(define-fun |counter_n _witness_.anyinit_procdff_43| ((state |counter_s|)) (_ BitVec 4) (|counter#2| state))
(define-fun |counter#5| ((state |counter_s|)) (_ BitVec 1) (bvnot (ite (|counter#4| state) #b1 #b0))) ; $auto$rtlil.cc:2724:Not$98
; yosys-smt2-assume 0 $auto$formalff.cc:758:execute$99
(define-fun |counter_u 0| ((state |counter_s|)) Bool (or (= ((_ extract 0 0) (|counter#5| state)) #b1) (not true))) ; $auto$formalff.cc:758:execute$99
(define-fun |counter#6| ((state |counter_s|)) (_ BitVec 4) (bvadd (|counter#3| state) #b0001)) ; $add$counter.sv:12$24_Y
(define-fun |counter#7| ((state |counter_s|)) (_ BitVec 4) (ite (|counter#1| state) (|counter#6| state) (|counter#3| state))) ; $0\count[3:0]
(define-fun |counter#8| ((state |counter_s|)) (_ BitVec 4) (ite (|counter#0| state) #b0000 (|counter#7| state))) ; $auto$rtlil.cc:2859:Mux$84
(define-fun |counter_a| ((state |counter_s|)) Bool true)
(define-fun |counter_u| ((state |counter_s|)) Bool 
  (|counter_u 0| state)
)
(define-fun |counter_i| ((state |counter_s|)) Bool true)
(define-fun |counter_h| ((state |counter_s|)) Bool true)
(define-fun |counter_t| ((state |counter_s|) (next_state |counter_s|)) Bool 
  (= (|counter#8| state) (|counter#2| next_state)) ; $procdff$43 \_witness_.anyinit_procdff_43
) ; end of module counter
; yosys-smt2-module counter_props
(declare-sort |counter_props_s| 0)
(declare-fun |counter_props_is| (|counter_props_s|) Bool)
(declare-fun |counter_props#0| (|counter_props_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_props_n reset| ((state |counter_props_s|)) Bool (|counter_props#0| state))
(declare-fun |counter_props#1| (|counter_props_s|) Bool) ; \enable
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
; yosys-smt2-witness {"offset": 0, "path": ["\\enable"], "smtname": "enable", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_props_n enable| ((state |counter_props_s|)) Bool (|counter_props#1| state))
(declare-fun |counter_props#2| (|counter_props_s|) (_ BitVec 4)) ; \count
; yosys-smt2-input count 4
; yosys-smt2-wire count 4
; yosys-smt2-witness {"offset": 0, "path": ["\\count"], "smtname": "count", "smtoffset": 0, "type": "input", "width": 4}
(define-fun |counter_props_n count| ((state |counter_props_s|)) (_ BitVec 4) (|counter_props#2| state))
(declare-fun |counter_props#3| (|counter_props_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_props_n clk| ((state |counter_props_s|)) Bool (|counter_props#3| state))
; yosys-smt2-anyinit counter_props#4 4 counter_props.sv:34.5-44.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_47"], "smtname": 4, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |counter_props#4| (|counter_props_s|) (_ BitVec 4)) ; \_witness_.anyinit_procdff_47
; yosys-smt2-register _witness_.anyinit_procdff_47 4
; yosys-smt2-wire _witness_.anyinit_procdff_47 4
(define-fun |counter_props_n _witness_.anyinit_procdff_47| ((state |counter_props_s|)) (_ BitVec 4) (|counter_props#4| state))
; yosys-smt2-anyinit counter_props#5 4 counter_props.sv:34.5-44.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_46"], "smtname": 5, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |counter_props#5| (|counter_props_s|) (_ BitVec 4)) ; \_witness_.anyinit_procdff_46
; yosys-smt2-register _witness_.anyinit_procdff_46 4
; yosys-smt2-wire _witness_.anyinit_procdff_46 4
(define-fun |counter_props_n _witness_.anyinit_procdff_46| ((state |counter_props_s|)) (_ BitVec 4) (|counter_props#5| state))
; yosys-smt2-anyinit counter_props#6 1 counter_props.sv:34.5-44.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_45"], "smtname": 6, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |counter_props#6| (|counter_props_s|) (_ BitVec 1)) ; \_witness_.anyinit_procdff_45
; yosys-smt2-register _witness_.anyinit_procdff_45 1
; yosys-smt2-wire _witness_.anyinit_procdff_45 1
(define-fun |counter_props_n _witness_.anyinit_procdff_45| ((state |counter_props_s|)) Bool (= ((_ extract 0 0) (|counter_props#6| state)) #b1))
; yosys-smt2-anyinit counter_props#7 1 counter_props.sv:34.5-44.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_44"], "smtname": 7, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |counter_props#7| (|counter_props_s|) (_ BitVec 1)) ; \_witness_.anyinit_procdff_44
; yosys-smt2-register _witness_.anyinit_procdff_44 1
; yosys-smt2-wire _witness_.anyinit_procdff_44 1
(define-fun |counter_props_n _witness_.anyinit_procdff_44| ((state |counter_props_s|)) Bool (= ((_ extract 0 0) (|counter_props#7| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$async2sync.cc:110:execute$64"], "smtname": 8, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |counter_props#8| (|counter_props_s|) (_ BitVec 1)) ; $auto$async2sync.cc:110:execute$64
; yosys-smt2-register $auto$async2sync.cc:110:execute$64 1
(define-fun |counter_props_n $auto$async2sync.cc:110:execute$64| ((state |counter_props_s|)) Bool (= ((_ extract 0 0) (|counter_props#8| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$async2sync.cc:110:execute$58"], "smtname": 9, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |counter_props#9| (|counter_props_s|) (_ BitVec 1)) ; $auto$async2sync.cc:110:execute$58
; yosys-smt2-register $auto$async2sync.cc:110:execute$58 1
(define-fun |counter_props_n $auto$async2sync.cc:110:execute$58| ((state |counter_props_s|)) Bool (= ((_ extract 0 0) (|counter_props#9| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$async2sync.cc:101:execute$60"], "smtname": 10, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |counter_props#10| (|counter_props_s|) (_ BitVec 1)) ; $auto$async2sync.cc:101:execute$60
; yosys-smt2-register $auto$async2sync.cc:101:execute$60 1
(define-fun |counter_props_n $auto$async2sync.cc:101:execute$60| ((state |counter_props_s|)) Bool (= ((_ extract 0 0) (|counter_props#10| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$async2sync.cc:101:execute$54"], "smtname": 11, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |counter_props#11| (|counter_props_s|) (_ BitVec 1)) ; $auto$async2sync.cc:101:execute$54
; yosys-smt2-register $auto$async2sync.cc:101:execute$54 1
(define-fun |counter_props_n $auto$async2sync.cc:101:execute$54| ((state |counter_props_s|)) Bool (= ((_ extract 0 0) (|counter_props#11| state)) #b1))
(define-fun |counter_props#12| ((state |counter_props_s|)) (_ BitVec 1) (bvnot (ite (|counter_props#3| state) #b1 #b0))) ; $auto$rtlil.cc:2724:Not$95
; yosys-smt2-assume 0 $auto$formalff.cc:758:execute$96
(define-fun |counter_props_u 0| ((state |counter_props_s|)) Bool (or (= ((_ extract 0 0) (|counter_props#12| state)) #b1) (not true))) ; $auto$formalff.cc:758:execute$96
(define-fun |counter_props#13| ((state |counter_props_s|)) Bool (|counter_props_is| state)) ; $auto$rtlil.cc:2771:And$53
; yosys-smt2-assume 1 _witness_.check_assume_counter_props_sv_9_21 counter_props.sv:9.13-9.35
(define-fun |counter_props_u 1| ((state |counter_props_s|)) Bool (or (|counter_props#0| state) (not (|counter_props#13| state)))) ; _witness_.check_assume_counter_props_sv_9_21
; yosys-smt2-assert 0 _witness_.check_assert_counter_props_sv_40_17 counter_props.sv:40.21-40.46
(define-fun |counter_props_a 0| ((state |counter_props_s|)) Bool (or (= ((_ extract 0 0) (|counter_props#9| state)) #b1) (not (= ((_ extract 0 0) (|counter_props#11| state)) #b1)))) ; _witness_.check_assert_counter_props_sv_40_17
; yosys-smt2-assert 1 _witness_.check_assert_counter_props_sv_38_14 counter_props.sv:38.21-38.57
(define-fun |counter_props_a 1| ((state |counter_props_s|)) Bool (or (= ((_ extract 0 0) (|counter_props#8| state)) #b1) (not (= ((_ extract 0 0) (|counter_props#10| state)) #b1)))) ; _witness_.check_assert_counter_props_sv_38_14
(define-fun |counter_props#14| ((state |counter_props_s|)) Bool (distinct (|counter_props#5| state) #b1111)) ; $ne$counter_props.sv:37$13_Y
(define-fun |counter_props#15| ((state |counter_props_s|)) (_ BitVec 1) (ite (|counter_props#14| state) #b0 #b1)) ; $procmux$28_Y
(define-fun |counter_props#16| ((state |counter_props_s|)) Bool (and (or  (= ((_ extract 0 0) (|counter_props#7| state)) #b1) false) (or  (= ((_ extract 0 0) (|counter_props#6| state)) #b1) false))) ; $logic_and$counter_props.sv:36$12_Y
(define-fun |counter_props#17| ((state |counter_props_s|)) (_ BitVec 1) (ite (|counter_props#16| state) (|counter_props#15| state) #b0)) ; $procmux$30_Y
(define-fun |counter_props#18| ((state |counter_props_s|)) Bool (not (or  (|counter_props#0| state) false))) ; $0$past$counter_props.sv:36$1$0[0:0]$6
(define-fun |counter_props#19| ((state |counter_props_s|)) Bool (and (or  (|counter_props#18| state) false) (or  (|counter_props#1| state) false))) ; $logic_and$counter_props.sv:35$11_Y
(define-fun |counter_props#20| ((state |counter_props_s|)) (_ BitVec 1) (ite (|counter_props#19| state) (|counter_props#17| state) #b0)) ; $assert$counter_props.sv:40$17_EN
(define-fun |counter_props#21| ((state |counter_props_s|)) (_ BitVec 1) (ite (|counter_props#14| state) #b1 #b0)) ; $procmux$35_Y
(define-fun |counter_props#22| ((state |counter_props_s|)) (_ BitVec 1) (ite (|counter_props#16| state) (|counter_props#21| state) #b0)) ; $procmux$37_Y
(define-fun |counter_props#23| ((state |counter_props_s|)) (_ BitVec 1) (ite (|counter_props#19| state) (|counter_props#22| state) #b0)) ; $assert$counter_props.sv:38$14_EN
(define-fun |counter_props#24| ((state |counter_props_s|)) Bool (not (or  (= ((_ extract 0 0) (|counter_props#2| state)) #b1) (= ((_ extract 1 1) (|counter_props#2| state)) #b1) (= ((_ extract 2 2) (|counter_props#2| state)) #b1) (= ((_ extract 3 3) (|counter_props#2| state)) #b1)))) ; $eq$counter_props.sv:40$18_Y
(define-fun |counter_props#25| ((state |counter_props_s|)) (_ BitVec 5) (bvadd (concat #b0 (|counter_props#4| state)) #b00001)) ; $add$counter_props.sv:38$15_Y
(define-fun |counter_props#26| ((state |counter_props_s|)) Bool (= (concat #b0 (|counter_props#2| state)) (|counter_props#25| state))) ; $eq$counter_props.sv:38$16_Y
(define-fun |counter_props_a| ((state |counter_props_s|)) Bool (and
  (|counter_props_a 0| state)
  (|counter_props_a 1| state)
))
(define-fun |counter_props_u| ((state |counter_props_s|)) Bool (and
  (|counter_props_u 0| state)
  (|counter_props_u 1| state)
))
(define-fun |counter_props_i| ((state |counter_props_s|)) Bool (and
  (= (= ((_ extract 0 0) (|counter_props#8| state)) #b1) true) ; $auto$async2sync.cc:110:execute$64
  (= (= ((_ extract 0 0) (|counter_props#9| state)) #b1) true) ; $auto$async2sync.cc:110:execute$58
  (= (= ((_ extract 0 0) (|counter_props#10| state)) #b1) false) ; $auto$async2sync.cc:101:execute$60
  (= (= ((_ extract 0 0) (|counter_props#11| state)) #b1) false) ; $auto$async2sync.cc:101:execute$54
))
(define-fun |counter_props_h| ((state |counter_props_s|)) Bool true)
(define-fun |counter_props_t| ((state |counter_props_s|) (next_state |counter_props_s|)) Bool (and
  (= (|counter_props#20| state) (|counter_props#11| next_state)) ; $auto$async2sync.cc:104:execute$56 $auto$async2sync.cc:101:execute$54
  (= (|counter_props#23| state) (|counter_props#10| next_state)) ; $auto$async2sync.cc:104:execute$62 $auto$async2sync.cc:101:execute$60
  (= (ite (|counter_props#24| state) #b1 #b0) (|counter_props#9| next_state)) ; $auto$async2sync.cc:112:execute$59 $auto$async2sync.cc:110:execute$58
  (= (ite (|counter_props#26| state) #b1 #b0) (|counter_props#8| next_state)) ; $auto$async2sync.cc:112:execute$65 $auto$async2sync.cc:110:execute$64
  (= (ite (|counter_props#18| state) #b1 #b0) (|counter_props#7| next_state)) ; $procdff$44 \_witness_.anyinit_procdff_44
  (= (ite (|counter_props#1| state) #b1 #b0) (|counter_props#6| next_state)) ; $procdff$45 \_witness_.anyinit_procdff_45
  (= (|counter_props#2| state) (|counter_props#5| next_state)) ; $procdff$46 \_witness_.anyinit_procdff_46
  (= (|counter_props#2| state) (|counter_props#4| next_state)) ; $procdff$47 \_witness_.anyinit_procdff_47
)) ; end of module counter_props
; yosys-smt2-module counter_top
(declare-sort |counter_top_s| 0)
(declare-fun |counter_top_is| (|counter_top_s|) Bool)
(declare-fun |counter_top#0| (|counter_top_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_top_n reset| ((state |counter_top_s|)) Bool (|counter_top#0| state))
(declare-fun |counter_top#1| (|counter_top_s|) Bool) ; \enable
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
; yosys-smt2-witness {"offset": 0, "path": ["\\enable"], "smtname": "enable", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_top_n enable| ((state |counter_top_s|)) Bool (|counter_top#1| state))
; yosys-smt2-cell counter u_counter
; yosys-smt2-witness {"path": ["\\u_counter"], "smtname": "u_counter", "type": "cell"}
(declare-fun |counter_top#2| (|counter_top_s|) (_ BitVec 4)) ; \count
(declare-fun |counter_top_h u_counter| (|counter_top_s|) |counter_s|)
; yosys-smt2-wire count 4
(define-fun |counter_top_n count| ((state |counter_top_s|)) (_ BitVec 4) (|counter_top#2| state))
(declare-fun |counter_top#3| (|counter_top_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |counter_top_n clk| ((state |counter_top_s|)) Bool (|counter_top#3| state))
(define-fun |counter_top#4| ((state |counter_top_s|)) (_ BitVec 1) (bvnot (ite (|counter_top#3| state) #b1 #b0))) ; $auto$rtlil.cc:2724:Not$92
; yosys-smt2-assume 0 $auto$formalff.cc:758:execute$93
(define-fun |counter_top_u 0| ((state |counter_top_s|)) Bool (or (= ((_ extract 0 0) (|counter_top#4| state)) #b1) (not true))) ; $auto$formalff.cc:758:execute$93
; yosys-smt2-cell counter_props u_props
; yosys-smt2-witness {"path": ["\\u_props"], "smtname": "u_props", "type": "cell"}
(declare-fun |counter_top_h u_props| (|counter_top_s|) |counter_props_s|)
(define-fun |counter_top_a| ((state |counter_top_s|)) Bool (and
  (|counter_a| (|counter_top_h u_counter| state))
  (|counter_props_a| (|counter_top_h u_props| state))
))
(define-fun |counter_top_u| ((state |counter_top_s|)) Bool (and
  (|counter_top_u 0| state)
  (|counter_u| (|counter_top_h u_counter| state))
  (|counter_props_u| (|counter_top_h u_props| state))
))
(define-fun |counter_top_i| ((state |counter_top_s|)) Bool (and
  (|counter_i| (|counter_top_h u_counter| state))
  (|counter_props_i| (|counter_top_h u_props| state))
))
(define-fun |counter_top_h| ((state |counter_top_s|)) Bool (and
  (= (|counter_top_is| state) (|counter_is| (|counter_top_h u_counter| state)))
  (= (|counter_top#0| state) (|counter_n reset| (|counter_top_h u_counter| state))) ; counter.reset
  (= (|counter_top#1| state) (|counter_n enable| (|counter_top_h u_counter| state))) ; counter.enable
  (= (|counter_top#2| state) (|counter_n count| (|counter_top_h u_counter| state))) ; counter.count
  (= (|counter_top#3| state) (|counter_n clk| (|counter_top_h u_counter| state))) ; counter.clk
  (= (|counter_top_is| state) (|counter_props_is| (|counter_top_h u_props| state)))
  (= (|counter_top#0| state) (|counter_props_n reset| (|counter_top_h u_props| state))) ; counter_props.reset
  (= (|counter_top#1| state) (|counter_props_n enable| (|counter_top_h u_props| state))) ; counter_props.enable
  (= (|counter_top#2| state) (|counter_props_n count| (|counter_top_h u_props| state))) ; counter_props.count
  (= (|counter_top#3| state) (|counter_props_n clk| (|counter_top_h u_props| state))) ; counter_props.clk
  (|counter_h| (|counter_top_h u_counter| state))
  (|counter_props_h| (|counter_top_h u_props| state))
))
(define-fun |counter_top_t| ((state |counter_top_s|) (next_state |counter_top_s|)) Bool (and
  (|counter_t| (|counter_top_h u_counter| state) (|counter_top_h u_counter| next_state))
  (|counter_props_t| (|counter_top_h u_props| state) (|counter_top_h u_props| next_state))
)) ; end of module counter_top
; yosys-smt2-topmod counter_top
; end of yosys output
